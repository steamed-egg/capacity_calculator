const { test, expect } = require('@playwright/test');

test('Test PDF functionality through chatbot interaction', async ({ page }) => {
    // Navigate to the app
    await page.goto('http://localhost:8080');

    // Wait for page to load
    await page.waitForSelector('#chat-input', { timeout: 10000 });

    // Type a capacity forecast question
    await page.fill('#chat-input', 'What is my team capacity for October with 25 team members, 22 working days, and 85% availability?');

    // Click send button
    await page.click('#send-button');

    // Wait for the bot to respond and show dashboard
    await page.waitForTimeout(3000);

    // Look for dashboard elements
    const dashboardExists = await page.locator('.capacity-dashboard').isVisible().catch(() => false);
    console.log('Dashboard visible:', dashboardExists);

    if (dashboardExists) {
        // Look for PDF download button
        const pdfButton = page.locator('button:has-text("Download PDF")');
        const pdfButtonExists = await pdfButton.isVisible().catch(() => false);
        console.log('PDF button visible:', pdfButtonExists);

        if (pdfButtonExists) {
            // Listen for console messages to track PDF generation
            const consoleMessages = [];
            page.on('console', msg => {
                const text = msg.text();
                consoleMessages.push(`${msg.type()}: ${text}`);
                console.log(`Console: ${msg.type()}: ${text}`);
            });

            // Listen for any dialogs (print dialog)
            let dialogShown = false;
            page.on('dialog', async dialog => {
                console.log(`Dialog: ${dialog.type()} - ${dialog.message()}`);
                dialogShown = true;
                await dialog.dismiss();
            });

            // Click PDF download button
            console.log('Clicking PDF download button...');
            await pdfButton.click();

            // Wait for PDF processing
            await page.waitForTimeout(5000);

            // Check if button is still enabled (not blocked)
            const isEnabled = await pdfButton.isEnabled();
            console.log('PDF button enabled after click:', isEnabled);

            // Look for specific error messages that indicate blocking
            const hasBlockingError = consoleMessages.some(msg =>
                msg.toLowerCase().includes('pdf libraries not loaded') ||
                msg.toLowerCase().includes('blocked') ||
                (msg.toLowerCase().includes('error') && msg.toLowerCase().includes('pdf'))
            );

            if (hasBlockingError) {
                console.log('❌ PDF functionality is BLOCKED');
                console.log('Blocking error messages:');
                consoleMessages.filter(msg =>
                    msg.toLowerCase().includes('pdf libraries not loaded') ||
                    msg.toLowerCase().includes('blocked') ||
                    (msg.toLowerCase().includes('error') && msg.toLowerCase().includes('pdf'))
                ).forEach(msg => console.log('  ', msg));
            } else {
                console.log('✅ PDF functionality is NOT blocked');
                if (dialogShown) {
                    console.log('✅ Print dialog fallback working');
                } else {
                    console.log('ℹ️  No dialog shown - either PDF generated or processing');
                }
            }

            // Take screenshot of final state
            await page.screenshot({ path: 'test-results/pdf-test-final.png' });

        } else {
            console.log('❌ PDF button not found in dashboard');
        }
    } else {
        console.log('❌ Dashboard not generated by chatbot');

        // Take screenshot to see what happened
        await page.screenshot({ path: 'test-results/no-dashboard.png' });
    }
});